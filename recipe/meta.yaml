{% set version = "16.0.0" %}
{% set major_ver = version.split(".")[0] %}
{% set build_number = 2 %}

{% set rocm_version = "5.5.0" %}

package:
  name: llvm-package
  version: {{ version }}

# AMD's llvm is a soft fork (they regularly pull updates from upstream) which
# is required for HIP. We don't want to clobber the canonical llvm or duplicate
# all of the build logic in the feedstock. However, the changes between AMD and
# upstream are significant enough that it's better to download the fork source
# instead of generating a patch between the two.
#
# Figure out which canonical stable release is closest to the AMD rocm release
# by looking in llvm/CMakeLists.txt to see the llvm version. AMD git tags are
# rocm-x.x.x and llvm git tags are llvmorg-x.x.x. AMD may not get patch release
# updates.
source:
  url: https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version.replace(".rc", "-rc") }}/llvm-project-{{ version.replace(".rc", "rc") }}.src.tar.xz  # [fork == 'llvm']
  sha256: 3b12e35332e10cf650578ae18247b91b04926d5427e1a6ae9a51d170a47cfbb2  # [fork == 'llvm']
  url: https://github.com/RadeonOpenCompute/llvm-project/archive/refs/tags/rocm-{{ rocm_version }}.tar.gz  # [fork == 'rocm']
  sha256: 5dc6c99f612b69ff73145bee17524e3712990100e16445b71634106acf7927cf  # [fork == 'rocm']
  patches:
    # - patches/intel-D47188-svml-VF.patch    # Fixes vectorizer and extends SVML support
    # - patches/expect-fastmath-entrypoints-in-add-TLI-mappings.ll.patch # adjusts test added in 10.0.0 for intel-D47188-svml-VF.patch effects
    - patches/0001-pass-through-QEMU_LD_PREFIX-SDKROOT.patch
    - patches/0002-Always-copy-on-windows.patch  # [win]
    - patches/0003-restore-macos-10.9-support.patch  # [osx]

build:
  number: {{ build_number }}
  merge_build_host: false

requirements:
  build:
    - {{ compiler('cxx') }}
    - cmake
    - ninja
    - python >=3
    - libcxx {{ cxx_compiler_version }}  # [osx]
  host:
    - libcxx {{ cxx_compiler_version }}  # [osx]
    # needs aarch/ppc/arm (re)build of conda-forge/backtrace-feedstock
    - backtrace                          # [unix and x86]
    - libxml2
    - zlib
    - zstd

outputs:
  # Contains everything
  - name: llvmdev
#FIXME: Ship static libs separately or not at all if they are redundant
    files:
      - bin/llvm-config                  # [unix]
      - include/llvm                     # [unix]
      - include/llvm-c                   # [unix]
      - lib/cmake/llvm                   # [unix]
      - lib/libLLVM-{{ version }}.dylib  # [osx]
      - lib/libLLVM-{{ version }}.so     # [linux]
      - lib/libLLVM.dylib                # [osx]
      - lib/libLLVM.so                   # [linux]
      - lib/libLLVM*.a                   # [unix]
      - lib/libLTO.dylib                 # [osx]
      - lib/libLTO.so                    # [linux]
      - lib/libRemarks.dylib             # [osx]
      - lib/libRemarks.so                # [linux]
      - libexec/llvm                     # [unix]
      - Library/bin/llvm-config.exe              # [win]
      - Library/include/llvm                     # [win]
      - Library/include/llvm-c                   # [win]
      - Library/lib/cmake/llvm                   # [win]
      # No shared library LLVM.dll on Windows; only static libs for each target
      - Library/lib/LLVM*.lib                    # [win]
      - Library/lib/LTO.lib                      # [win]
      - Library/lib/Remarks.lib                  # [win]
      - Library/bin/LTO.dll                      # [win]
      - Library/bin/Remarks.dll                  # [win]
      - Library/libexec/llvm                     # [win]
    build:
      activate_in_script: true
      track_features:
        - rocm_W8dSr8cWmz          # [fork=="rocm"]
      string: {{ fork }}_h{{ PKG_HASH }}_{{ build_number }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - python >=3
        - libcxx {{ cxx_compiler_version }}  # [osx]
      host:
        - libcxx {{ cxx_compiler_version }}  # [osx]
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}
        - {{ pin_subpackage("llvm-tools", exact=True) }}
        - libxml2
        - zlib
        - zstd     # [build_platform == target_platform]
      run:
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}
        - {{ pin_subpackage("llvm-tools", exact=True) }}
        - libcxx >={{ cxx_compiler_version }}                           # [osx]
    test:
      commands:
        - $PREFIX/bin/llvm-config --libs                                # [not win]
        - test -f $PREFIX/include/llvm/Pass.h                           # [not win]
        - test -f $PREFIX/lib/libLLVMCore.a                             # [not win]
        - $PREFIX/libexec/llvm/not false                                # [not win]
        - $PREFIX/bin/llvm-nm --help                                    # [not win]
        - if not exist %LIBRARY_INC%\\llvm\\Pass.h exit 1               # [win]
        - if not exist "%LIBRARY_PREFIX%"\\libexec\llvm\not.exe exit 1  # [win]
        - if not exist "%LIBRARY_BIN%"\\llvm-nm.exe exit 1              # [win]
        - llvm-nm.exe --help                                            # [win]

  # Contains the shared libraries. To make different LLVM libraries co-installable
  # soversion is appended to the package name.
  - name: libllvm{{ major_ver }}
    files:
      - lib/libLLVM-{{ major_ver }}.so           # [linux]
      - lib/libLTO.so.{{ major_ver }}            # [linux]
      - lib/libRemarks.so.{{ major_ver }}        # [linux]
      - lib/libLLVM-{{ major_ver }}.dylib        # [osx]
      - lib/libLTO.{{ major_ver }}.dylib         # [osx]
      - lib/libRemarks.{{ major_ver }}.dylib     # [osx]
      # No version-labeled libs on Windows; libraries are not co-installable
    build:
      track_features:
        - rocm_W8dSr8cWmz          # [fork=="rocm"]
      string: {{ fork }}_h{{ PKG_HASH }}_{{ build_number }}
      activate_in_script: true
      run_exports:   # [not win]
        - {{ pin_subpackage("libllvm" + major_ver, max_pin="x.x") }}  # [not win]
    requirements:
      build:
        - {{ compiler('cxx') }}
        - ninja                    # [not win]
        - cmake                    # [not win]
        - python >=3               # [not win]
        - libcxx {{ cxx_compiler_version }}  # [osx]
      host:
        - libcxx {{ cxx_compiler_version }}  # [osx]
        - libxml2
        - zlib
        - zstd
      run:
        - libcxx >={{ cxx_compiler_version }}  # [osx]
    test:
      commands:
        - test -f $PREFIX/lib/libLLVM-{{ major_ver }}${SHLIB_EXT}     # [unix]
        - test -f $PREFIX/lib/libLTO${SHLIB_EXT}.{{ major_ver }}      # [linux]
        - test -f $PREFIX/lib/libRemarks${SHLIB_EXT}.{{ major_ver }}  # [linux]
        - test -f $PREFIX/lib/libLTO.{{ major_ver }}${SHLIB_EXT}      # [osx]
        - test -f $PREFIX/lib/libRemarks.{{ major_ver }}${SHLIB_EXT}  # [osx]

  # This is a meta package so that people can use the latest libllvm and also
  # for run_exports
  - name: llvm
    build:
      track_features:
        - rocm_W8dSr8cWmz          # [fork=="rocm"]
      string: {{ fork }}_h{{ PKG_HASH }}_{{ build_number }}
      run_exports:   # [not win]
        - {{ pin_subpackage("libllvm" + major_ver, max_pin="x.x") }}  # [not win]
    requirements:
      build:
      host:
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}     # [not win]
        - libxml2
        - zlib
        - zstd
      run:   # [not win]
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}     # [not win]
      run_constrained:   # [not win]
        - llvmdev   {{ version }}                                     # [not win]
    test:
      commands:
        - echo "Hello World!"

  # Contains LLVM tools
  - name: llvm-tools
    files:
      - bin/bugpoint*  # [unix]
      - bin/dsymutil*  # [unix]
      - bin/llc*  # [unix]
      - bin/lli*  # [unix]
      - bin/llvm-[!c]*  # [unix]
      - bin/llvm-cov*  # [unix]
      - bin/llvm-c[afvx-]*  # [unix]
      - bin/opt*  # [unix]
      - bin/sancov*  # [unix]
      - bin/sanstats*  # [unix]
      - bin/verify-uselistorder*  # [unix]
      - share/opt-viewer  # [unix]
      - Library/bin/bugpoint.exe  # [win]
      - Library/bin/dsymutil.exe  # [win]
      - Library/bin/llc.exe  # [win]
      - Library/bin/lli.exe  # [win]
      - Library/bin/llvm-[!c]*.exe  # [win]
      - Library/bin/llvm-cov.exe  # [win]
      - Library/bin/llvm-c[afvx-]*.exe  # [win]
      - Library/bin/opt.exe  # [win]
      - Library/bin/sancov.exe  # [win]
      - Library/bin/sanstats.exe  # [win]
      - Library/bin/verify-uselistorder.exe  # [win]
      - Library/share/opt-viewer  # [win]
    build:
      track_features:
        - rocm_W8dSr8cWmz          # [fork=="rocm"]
      string: {{ fork }}_h{{ PKG_HASH }}_{{ build_number }}
      activate_in_script: true
    requirements:
      build:
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - python >=3
        - libcxx {{ cxx_compiler_version }}  # [osx]
      host:
        - libcxx {{ cxx_compiler_version }}  # [osx]
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}
        - libxml2
        - zlib
        - zstd
      run:
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}
      run_constrained:
        - llvmdev   {{ version }}
    test:
      commands:
        - $PREFIX/bin/llc -version                               # [not win]
        - if not exist "%LIBRARY_BIN%"\\llc.exe exit 1           # [win]
        - llc -version                                           # [win]
#FIXME: Why is bin/llvm-config excluded here, and included in llvm-dev?
        - test ! -f $PREFIX/bin/llvm-config  # [unix]

  - name: lit
    build:
      track_features:
        - rocm_W8dSr8cWmz          # [fork=="rocm"]
      string: {{ fork }}_h{{ PKG_HASH }}_{{ build_number }}
      noarch: python
      script: python -m pip install llvm/utils/lit --no-deps -vv
      activate_in_script: true
      skip: true  # [not linux64]
      entry_points:
        # upstream LLVM is inconsistent; there's one way specified in lit's setup.py...
        - lit = lit.main:main
        # ... and then the CMake files we install here (e.g. AddLLVM.cmake) look for another
        - llvm-lit = lit.main:main
    requirements:
      host:
        - python >=3
        - pip
      run:
        - python
    test:
      imports:
        - lit
      commands:
        - lit -h
        - llvm-lit -h

about:
  home: http://llvm.org/
  dev_url: https://github.com/llvm/llvm-project
  license: Apache-2.0 WITH LLVM-exception
  license_file: llvm/LICENSE.TXT
  license_family: Apache
  summary: Development headers and libraries for LLVM

extra:
  recipe-maintainers:
    - JohanMabille
    - inducer
    - jakirkham
    - mingwandroid
    - SylvainCorlay
    - isuruf
    - timsnyder
    - xhochy
    - h-vetinari
